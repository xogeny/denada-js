#!/usr/bin/env node
// -*- mode: javascript -*-

var denada = require('..');
var denjson = require('../package.json');

var ArgumentParser = require('argparse').ArgumentParser;

var parser = new ArgumentParser({
    version: denjson.version,
    addHelp: true,
    description: 'Denada parser and grammar checker'
});

parser.addArgument(['tree'], { help: 'File to parse' });

parser.addArgument(
  [ '-g', '--grammar' ],
  { help: 'Grammar to apply to parsed file' });

parser.addArgument(
  [ '-a', '--ast' ],
  {
      defaultValue: false,
      action: 'storeTrue',
      help: "Include abstract syntax trees in output"
  });

var args = parser.parseArgs();

var tree = denada.parseFileSync(args.tree);
console.log("Parsing of "+args.tree+" was successful, "+tree.length+" elements found");
if (args.ast && !args.grammar) {
  console.log(JSON.stringify(tree, undefined, 2));
}
var grammar = null;
var issues = null;

if (args.grammar) {
  if (args.ast) {
    console.log(JSON.stringify(tree, undefined, 2));
  }
  grammar = denada.parseFileSync(args.grammar);
  console.log("Parsing of "+args.grammar+" was successful, "+
	      grammar.length+" elements found");
  issues = denada.process(tree, grammar);
  if (issues.length>0) {
    console.log("Grammar checking found the following issues:");
    for(var i=0;i<issues.length;i++) {
      console.log(issues[i]);
    } 
  } else {
    if (args.ast) {
      console.log("Parse grammar AST:");
      console.log(JSON.stringify(grammar, undefined, 2));
    }
    console.log("No grammatic issues found");
  }   
}
